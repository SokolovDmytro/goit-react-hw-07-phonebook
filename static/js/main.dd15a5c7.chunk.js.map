{"version":3,"sources":["components/App.module.css","components/alert/Alert.module.css","transitions/slide.module.css","redux/contacts/contactsConstans.js","redux/contacts/contactsActions.js","redux/contacts/constansOperation.js","redux/contacts/constansSelector.js","components/contactForm/ContactForm.js","components/contactForm/contactListItem/ContactListItem.js","components/contactList/ContactList.js","components/filter/Filter.js","components/alert/Alert.js","components/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js","components/contactForm/contactListItem/ContactsList.module.css"],"names":["module","exports","filter","type","contactsConstans","payload","duplicate","addContactRequest","addContactSuccess","contacts","addContactError","error","fetchContactRequest","fetchContactSuccess","fetchContactError","removeContactError","removeContactSuccess","id","removeContactRequest","baseURL","onAddContact","dispatch","contactsActions","axios","post","then","response","data","catch","fetchContacts","get","onRemoveContacts","delete","getFilter","state","getContacts","items","getLoading","loading","getAlert","alertSwitch","getFilteredContacts","createSelector","contact","name","toLowerCase","includes","ContactForm","number","changeAlertFn","props","switchAlert","setTimeout","handleSubmit","e","preventDefault","duplicateFn","onAlert","setState","some","handleChange","target","value","onSubmit","this","placeholder","onChange","Component","mapDispatchToProps","contactsOperation","connect","contactsSelector","ContactListItem","onRemove","className","styles","item","span","button","onClick","constansOperation","constansSelector","TransitionGroup","component","map","CSSTransition","key","timeout","classNames","slideTransition","unmountOnExit","getFilterValue","filterValue","alert","in","App","filterContacts","appear","title","length","onFetchContacts","combineReducers","rootReducer","contactsReducer","middlewares","thunk","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd15a5c7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__2qvhn\",\"appear\":\"App_appear__2YtxL\",\"appearActive\":\"App_appearActive__1hJDS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"Alert_alert__3p5sD\",\"enter\":\"Alert_enter__1-m-A\",\"enterActive\":\"Alert_enterActive__2xZzt\",\"exit\":\"Alert_exit__1NGAu\",\"exitActive\":\"Alert_exitActive__2pvVK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__3iebK\",\"enterActive\":\"slide_enterActive__U746_\",\"exit\":\"slide_exit__3Ef7f\",\"exitActive\":\"slide_exitActive__mT_Cz\"};","// const ADD_CONTACT = '@contacts/addContact';\r\n// const REMOVE_CONTACT = '@contacts/removeContact';\r\n// const FILTER_CONTACT = '@contacts/filterContact';\r\n// const EXIST_CONTACT = '@contacts/existContact';\r\n// export default { ADD_CONTACT, REMOVE_CONTACT, FILTER_CONTACT, EXIST_CONTACT };\r\n\r\nconst ADD = 'contacts/add';\r\nconst DEL = 'contacts/del';\r\nconst FILTER = 'contacts/filter';\r\nconst DUPLICATE = 'contacts/duplicate';\r\n\r\nconst ADD_CONTACT_REQUEST = 'contacts/addContactRequest';\r\nconst ADD_CONTACT_SUCCESS = 'contacts/addContactSuccess';\r\nconst ADD_CONTACT_ERROR = 'contacts/addContactError';\r\n\r\nconst DEL_CONTACT_REQUEST = 'contact/removeContactRequest';\r\nconst DEL_CONTACT_SUCCESS = 'contact/removeContactSuccess';\r\nconst DEL_CONTACT_ERROR = 'contact/removeContactError';\r\n\r\nconst FETCH_CONTACT_REQUEST = 'contacts/fetchContactsRequest';\r\nconst FETCH_CONTACT_SUCCESS = 'contacts/fetchContactsSuccess';\r\nconst FETCH_CONTACT_ERROR = 'contacts/fetchContactsError';\r\n\r\nexport default {\r\n  ADD,\r\n  DEL,\r\n  FILTER,\r\n  DUPLICATE,\r\n\r\n  ADD_CONTACT_REQUEST,\r\n  ADD_CONTACT_SUCCESS,\r\n  ADD_CONTACT_ERROR,\r\n\r\n  DEL_CONTACT_REQUEST,\r\n  DEL_CONTACT_SUCCESS,\r\n  DEL_CONTACT_ERROR,\r\n\r\n  FETCH_CONTACT_REQUEST,\r\n  FETCH_CONTACT_SUCCESS,\r\n  FETCH_CONTACT_ERROR,\r\n};\r\n","// import { v4 as uuidv4 } from 'uuid';\r\nimport contactsConstans from './contactsConstans';\r\n\r\n// const addContact = (contacts) => ({\r\n//   type: contactsConstans.ADD,\r\n//   payload: {\r\n//     contacts,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = (id) => ({\r\n//   type: contactsConstans.DEL,\r\n//   payload: {\r\n//     id,\r\n//   },\r\n// });\r\n\r\nconst filter = filter => {\r\n  return {\r\n    type: contactsConstans.FILTER,\r\n    payload: {\r\n      filter,\r\n    },\r\n  };\r\n};\r\n\r\nconst duplicate = () => ({\r\n  type: contactsConstans.DUPLICATE,\r\n});\r\n\r\nconst addContactRequest = () => {\r\n  return {\r\n    type: contactsConstans.ADD_CONTACT_REQUEST,\r\n  };\r\n};\r\n\r\nconst addContactSuccess = contacts => {\r\n  return {\r\n    type: contactsConstans.ADD_CONTACT_SUCCESS,\r\n    payload: {\r\n      ...contacts,\r\n    },\r\n  };\r\n};\r\n\r\nconst addContactError = error => {\r\n  return {\r\n    type: contactsConstans.ADD_CONTACT_ERROR,\r\n    payload: { error },\r\n  };\r\n};\r\n\r\nconst fetchContactRequest = () => {\r\n  return {\r\n    type: contactsConstans.FETCH_CONTACT_REQUEST,\r\n  };\r\n};\r\n\r\nconst fetchContactSuccess = contacts => {\r\n  return {\r\n    type: contactsConstans.FETCH_CONTACT_SUCCESS,\r\n    payload: contacts,\r\n  };\r\n};\r\n\r\nconst fetchContactError = error => {\r\n  return {\r\n    type: contactsConstans.FETCH_CONTACT_ERROR,\r\n    payload: { error },\r\n  };\r\n};\r\n\r\nconst removeContactRequest = () => {\r\n  return {\r\n    type: contactsConstans.DEL_CONTACT_REQUEST,\r\n  };\r\n};\r\n\r\nconst removeContactSuccess = id => {\r\n  return {\r\n    type: contactsConstans.DEL_CONTACT_SUCCESS,\r\n    payload: id,\r\n  };\r\n};\r\n\r\nconst removeContactError = error => {\r\n  return {\r\n    type: contactsConstans.DEL_CONTACT_ERROR,\r\n    payload: { error },\r\n  };\r\n};\r\n\r\nexport default {\r\n  // addContact,\r\n  // deleteContact,\r\n  filter,\r\n  duplicate,\r\n\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n\r\n  removeContactError,\r\n  removeContactSuccess,\r\n  removeContactRequest,\r\n};\r\n\r\n// const addContact = contact => {\r\n//   return {\r\n//     type: contactsConstans.ADD_CONTACT,\r\n//     payload: {\r\n//       ...contact,\r\n//       id: uuidv4(),\r\n//     },\r\n//   };\r\n// };\r\n\r\n// const removeContact = id => {\r\n//   return {\r\n//     type: contactsConstans.REMOVE_CONTACT,\r\n//     payload: id,\r\n//   };\r\n// };\r\n\r\n// const getFilterValue = filter => {\r\n//   return {\r\n//     type: contactsConstans.FILTER_CONTACT,\r\n//     payload: filter,\r\n//   };\r\n// };\r\n\r\n// const existContact = () => {\r\n//   return {\r\n//     type: contactsConstans.EXIST_CONTACT,\r\n//   };\r\n// };\r\n\r\n// export default { addContact, removeContact, getFilterValue, existContact };\r\n","import axios from 'axios';\r\nimport contactsActions from '../contacts/contactsActions';\r\n\r\nconst baseURL = `http://localhost:4242/`;\r\n\r\nconst onAddContact = contacts => dispatch => {\r\n  dispatch(contactsActions.addContactRequest());\r\n  axios\r\n    .post(`${baseURL}contacts`, contacts)\r\n    .then(response => {\r\n      dispatch(contactsActions.addContactSuccess(response.data));\r\n    })\r\n    .catch(error => dispatch(contactsActions.addContactError(error)));\r\n};\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(contactsActions.fetchContactRequest());\r\n\r\n  axios\r\n    .get(`${baseURL}contacts`)\r\n    .then(({ data }) => {\r\n      dispatch(contactsActions.fetchContactSuccess(data));\r\n    })\r\n    .catch(error => {\r\n      dispatch(contactsActions.fetchContactError(error));\r\n    });\r\n};\r\n\r\nconst onRemoveContacts = id => dispatch => {\r\n  dispatch(contactsActions.removeContactRequest());\r\n  axios\r\n    .delete(`${baseURL}contacts/${id}`)\r\n    .then(() => {\r\n      dispatch(contactsActions.removeContactSuccess(id));\r\n    })\r\n    .catch(error => {\r\n      dispatch(contactsActions.removeContactError(error));\r\n    });\r\n};\r\n\r\nexport default { onAddContact, fetchContacts, onRemoveContacts };\r\n","import { createSelector } from 'reselect';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\nconst getFilter = state => state.contacts.filter;\r\nconst getAlert = state => state.contacts.alertSwitch;\r\n\r\nconst getContacts = state => {\r\n  return state.contacts.items;\r\n};\r\n\r\nconst getFilteredContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\nexport default {\r\n  getLoading,\r\n  getFilter,\r\n  getAlert,\r\n  getFilteredContacts,\r\n  getContacts,\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\nimport contactsOperation from '../../redux/contacts/constansOperation';\r\nimport contactsSelector from '../../redux/contacts/constansSelector';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n  changeAlertFn = () => {\r\n    this.props.switchAlert();\r\n    setTimeout(() => {\r\n      this.props.switchAlert();\r\n    }, 2500);\r\n  };\r\n\r\n  // handleSubmit = e => {\r\n  //   e.preventDefault();\r\n  //   if (this.state.name) {\r\n  //     const isNameExist = this.props.items.some(\r\n  //       contact => contact.name === this.state.name,\r\n  //     );\r\n  //     !isNameExist\r\n  //       ? this.props.onAddContact({\r\n  //           name: this.state.name,\r\n  //           number: this.state.number,\r\n  //         })\r\n  //       : this.changeAlertFn();\r\n\r\n  //     this.setState({\r\n  //       name: '',\r\n  //       number: '',\r\n  //     });\r\n  //   }\r\n  //   return;\r\n  // };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (this.duplicateFn()) {\r\n      this.props.onAlert();\r\n      setTimeout(() => {\r\n        this.props.onAlert();\r\n      }, 1500);\r\n    } else {\r\n      this.props.onAddContact({ ...this.state });\r\n      this.setState({ name: '', number: '' });\r\n    }\r\n  };\r\n\r\n  duplicateFn = () => {\r\n    return this.props.contacts.some(\r\n      contacts => contacts.name.toLowerCase() === this.state.name.toLowerCase(),\r\n    );\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <h2>NAME</h2>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"Enter name\"\r\n            onChange={this.handleChange}\r\n            value={this.state.name}\r\n          />\r\n          <h2>NUMBER</h2>\r\n          <input\r\n            type=\"tel\"\r\n            // pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\r\n            name=\"number\"\r\n            // placeholder=\"123-321-1111\"\r\n            onChange={this.handleChange}\r\n            value={this.state.number}\r\n          />\r\n          <button type=\"submit\">Add contact</button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: contactsSelector.getContacts(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: contactsOperation.onAddContact,\r\n  onAlert: contactsActions.duplicate,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\nContactForm.propTypes = {\r\n  number: PropTypes.number,\r\n  name: PropTypes.string,\r\n};\r\n","import React from 'react';\r\nimport styles from './ContactsList.module.css';\r\n// import PropTypes from 'prop-types';\r\n// import { connect } from 'react-redux';\r\n// import contactsActions from '../../../redux/contacts/contactsActions';\r\n\r\nconst ContactListItem = ({ id, name, number, onRemove }) => {\r\n  return (\r\n    <li className={styles.item}>\r\n      <span className={styles.span}>{name} </span>\r\n      <span className={styles.span}>{number} </span>\r\n      <button\r\n        className={styles.button}\r\n        type=\"button\"\r\n        id={id}\r\n        onClick={onRemove}\r\n      >\r\n        X\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\n// ContactListItem.propTypes = {\r\n//   contact: PropTypes.shape({\r\n//     id: PropTypes.string.isRequired,\r\n//     name: PropTypes.string.isRequired,\r\n//     number: PropTypes.string.isRequired,\r\n//   }),\r\n// };\r\n\r\n// const mapDispatchToProps = (dispatch, ownProps) => ({\r\n//   removeContact: () => dispatch(contactsActions.removeContact(ownProps.id)),\r\n// });\r\n\r\n// export default connect(null, mapDispatchToProps)(ContactListItem);\r\nexport default ContactListItem;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContactListItem from '../contactForm/contactListItem/ContactListItem';\r\n// import PropTypes from 'prop-types';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport slideTransition from '../../transitions/slide.module.css';\r\nimport constansSelector from '../../../src/redux/contacts/constansSelector';\r\nimport constansOperation from '../../../src/redux/contacts/constansOperation';\r\n\r\nconst ContactList = ({ contacts, onRemoveContacts }) => (\r\n  <>\r\n    <TransitionGroup component=\"ul\">\r\n      {contacts.map(({ id, name, number }) => (\r\n        <CSSTransition\r\n          key={id}\r\n          timeout={250}\r\n          classNames={slideTransition}\r\n          unmountOnExit\r\n        >\r\n          <ContactListItem\r\n            key={id}\r\n            name={name}\r\n            number={number}\r\n            onRemove={() => onRemoveContacts(id)}\r\n          />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  </>\r\n);\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    items: constansSelector.getContacts(state),\r\n    contacts: constansSelector.getFilteredContacts(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onRemoveContacts: constansOperation.onRemoveContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n// const ContactList = ({ contacts, removeContact }) => (\r\n//   <TransitionGroup component=\"ul\">\r\n//     {contacts.map(contact => (\r\n//       <CSSTransition\r\n//         key={contact.id}\r\n//         timeout={250}\r\n//         classNames={slideTransition}\r\n//         unmountOnExit\r\n//       >\r\n//         <ContactListItem\r\n//           contact={contact}\r\n//           id={contact.id}\r\n//           removeContact={removeContact}\r\n//         />\r\n//       </CSSTransition>\r\n//     ))}\r\n//   </TransitionGroup>\r\n// );\r\n\r\n// ContactList.propTypes = {\r\n//   removeContact: PropTypes.func.isRequired,\r\n//   contact: PropTypes.arrayOf(\r\n//     PropTypes.shape({\r\n//       id: PropTypes.string.isRequired,\r\n//       name: PropTypes.string.isRequired,\r\n//       number: PropTypes.string.isRequired,\r\n//     }),\r\n//   ),\r\n// };\r\n\r\n// export default ContactList;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\nimport constansSelector from '../../redux/contacts/constansSelector';\r\n\r\nconst Filter = ({ getFilterValue, filterValue }) => (\r\n  <>\r\n    <p>Find contact by name</p>\r\n    <input\r\n      type=\"text\"\r\n      onChange={e => getFilterValue(e.target.value)}\r\n      value={filterValue}\r\n    />\r\n  </>\r\n);\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    filterValue: constansSelector.getFilter(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  getFilterValue: contactsActions.filter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport styles from './Alert.module.css';\r\n\r\nconst Alert = ({ alert }) => {\r\n  return (\r\n    <CSSTransition in={alert} classNames={styles} timeout={250} unmountOnExit>\r\n      <p className={styles.alert}>The name is alredy exsist</p>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    alert: state.alert,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Alert);\r\n\r\n// import React from \"react\";\r\n// import styles from \"./Alert.module.css\";\r\n\r\n// const Alert = ({ alertSwitch }) => {\r\n//   return (\r\n//     <div className={styles.alertWrapper}>\r\n//       <p>Contact already exist !</p>\r\n//       <button onClick={alertSwitch} className={styles.btn}>\r\n//         Ok\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Alert;\r\n","import React, { Component } from 'react';\r\nimport constansOperation from '../redux/contacts/constansOperation';\r\n// import constansSelector from '../redux/contacts/constansSelector';\r\nimport ContactForm from './contactForm/ContactForm';\r\nimport ContactList from './contactList/ContactList';\r\nimport Filter from './filter/Filter';\r\nimport Alert from './alert/Alert';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport styles from './App.module.css';\r\nimport { connect } from 'react-redux';\r\n\r\nclass App extends Component {\r\n  filterContacts = () => {\r\n    return this.props.items.filter(contact =>\r\n      contact.name.toLowerCase().includes(this.props.filter.toLowerCase()),\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Alert />\r\n        <CSSTransition\r\n          in={true}\r\n          timeout={500}\r\n          classNames={styles}\r\n          appear={true}\r\n          unmountOnExit\r\n        >\r\n          <p className={styles.title}>Phonebook</p>\r\n        </CSSTransition>\r\n\r\n        <ContactForm />\r\n        <h2>Contacts</h2>\r\n        {this.props.items.length > 1 && <Filter />}\r\n        <ContactList contacts={this.filterContacts()} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    items: state.contacts.items,\r\n    alert: state.contacts.alert,\r\n    filter: state.contacts.filter,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onFetchContacts: constansOperation.fetchContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n// class App extends Component {\r\n//   componentDidMount() {\r\n//     this.props.onFetchContacts();\r\n//   }\r\n\r\n//   filterContacts = () => {\r\n//     return this.props.items.filter(contact =>\r\n//       contact.name.toLowerCase().includes(this.props.filter.toLowerCase()),\r\n//     );\r\n//   };\r\n\r\n//   render() {\r\n//     // const { alert, loading } = this.props;\r\n//     const { alert } = this.props;\r\n//     return (\r\n//       <>\r\n//       {alert && (\r\n//         <CSSTransition\r\n//           in={true}\r\n//           timeout={500}\r\n//           classNames={styles}\r\n//           appear={true}\r\n//           unmountOnExit\r\n//         >\r\n//           <Alert alert={alert}/>\r\n//           <p className={styles.title}>Phonebook</p>\r\n//         </CSSTransition>)}\r\n\r\n//         <ContactForm />\r\n//         <h2>Contacts</h2>\r\n//         {this.props.items.length > 1 && <Filter />}\r\n//         <ContactList contacts={this.filterContacts()} />\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapStateToProps = (state) => {\r\n//   return {\r\n//     alert: constansSelector.getAlert(state),\r\n//     // loading: constansSelector.getLoading(state),\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = {\r\n//   onFetchContacts: constansOperation.fetchContacts,\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n","import { combineReducers } from 'redux';\r\nimport contactsConstans from './contactsConstans';\r\n\r\nconst items = (state = [], { type, payload }) => {\r\n  switch (type) {\r\n    case contactsConstans.ADD_CONTACT_SUCCESS:\r\n      return [...state, payload];\r\n\r\n    case contactsConstans.FETCH_CONTACT_SUCCESS:\r\n      return payload;\r\n\r\n    case contactsConstans.DEL_CONTACT_SUCCESS:\r\n      return state.filter(contacts => contacts.id !== payload);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst filter = (state = '', { type, payload }) => {\r\n  switch (type) {\r\n    case contactsConstans.FILTER:\r\n      return payload.filter;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst alertSwitch = (state = false, { type }) => {\r\n  switch (type) {\r\n    case contactsConstans.DUPLICATE:\r\n      return !state;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst loading = (state = false, { type, payload }) => {\r\n  switch (type) {\r\n    case contactsConstans.ADD_CONTACT_REQUEST:\r\n    case contactsConstans.FETCH_CONTACT_REQUEST:\r\n    case contactsConstans.DEL_CONTACT_REQUEST:\r\n      return true;\r\n\r\n    case contactsConstans.ADD_CONTACT_SUCCESS:\r\n    case contactsConstans.ADD_CONTACT_ERROR:\r\n    case contactsConstans.FETCH_CONTACT_SUCCESS:\r\n    case contactsConstans.FETCH_CONTACT_ERROR:\r\n    case contactsConstans.DEL_CONTACT_SUCCESS:\r\n    case contactsConstans.DEL_CONTACT_ERROR:\r\n      return false;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst error = (state = null, { type, payload }) => {\r\n  switch (type) {\r\n    case contactsConstans.ADD_CONTACT_ERROR:\r\n    case contactsConstans.FETCH_CONTACT_ERROR:\r\n    case contactsConstans.DEL_CONTACT_ERROR:\r\n      return payload;\r\n\r\n    case contactsConstans.ADD_CONTACT_REQUEST:\r\n    case contactsConstans.FETCH_CONTACT_REQUEST:\r\n    case contactsConstans.DEL_CONTACT_REQUEST:\r\n      return null;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default combineReducers({ items, filter, alertSwitch, loading, error });\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport contactsReducer from './contacts/contactsReducer';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\n// const store = createStore(contactsReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n});\r\n\r\nconst middlewares = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(...middlewares)),\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './components/App.module.css';\r\nimport App from './components/App';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n<Provider store={store}>\r\n<App />\r\n</Provider>,\r\n document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactsList_button__2OmPZ\",\"item\":\"ContactsList_item__3ksNs\",\"span\":\"ContactsList_span__3FG9m\"};"],"sourceRoot":""}